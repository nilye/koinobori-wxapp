<template>
  <view class="card bg-white mt-2">
    <main-cart-item  :value.sync="first"></main-cart-item>
    <sec-cart-item wx:if="{{expand}}" :value.sync="sec"></sec-cart-item>
    <third-cart-item wx:if="{{expand}}" :value.sync="third"></third-cart-item>
    <!--expand button-->
    <view wx:else class="ticket-buy-item" @tap="expandItems">
      <text class="c-acc">+ 增加其他票种</text>
    </view>
    <!--coupons-->
    <view wx:if="{{couponToUse && couponToUse.discount > 0}}" class="ticket-buy-item justify-space-between">
      <text>抵用券（{{couponToUse.name}}）</text>
      <text class="sub-total">-￥{{couponToUse.discount}}</text>
    </view>
    <!--subtotal-->
    <view class="ticket-buy-item justify-space-between">
      <text>小计</text>
      <text class="sub-total">({{ppl}}人份) ￥{{subTotal}}</text>
    </view>
  </view>
  <!--phone-->
  <view class="ticket-buy-item input-wrap flex-x-center mt-2">
    <text class="mr-2" :class="{warn: !phone}">手机*</text>
    <input placeholder="必填" bindinput="bindPhoneInput" type="number" maxlength="11"/>
  </view>
  <text class="hint">手机号将用于绑定门票和生成订单，不会有短信通知！</text>
  <navigator url="policy" class="mx-2 mt-4">
    <text class="d-inline">请在支付前，阅读</text>
    <text class="d-inline c-acc">购票须知</text>
  </navigator>
  <!--button-->
  <button class="ticket-buy-pay" open-type="getUserInfo"
          bindgetuserinfo="buy"
          disabled="{{subTotal===0 || !phoneIsValid}}">
    确认支付 ￥{{subTotal}}
  </button>
</template>

<script>
  import wepy from 'wepy'
  import CartItem from './components/cartItem'
  import http from '../../util/http'
  import filter from '../../util/filter'
  import store from '../../mixins/store'

  export default class TicketBuy extends wepy.page {
    mixins = [store]
    components = {
      'main-cart-item': CartItem,
      'sec-cart-item': CartItem,
      'third-cart-item': CartItem,
    }
    data = {
      first:null,
      sec:null,
      third:null,
      expand: false,
      phone:'',
      couponToUse:null,
      couponToUseIndex:null,
      processing:false
    }
    onLoad(query){
      let type = query.type
      console.log(this.store)
      this.first = {item:this.store.ticketsType[type], qty:1}
      this.availableCoupon()
    }
    methods = {
      bindPhoneInput(e){
        this.phone = e.detail.value
      },
      expandItems(){
        let otherTypes = []
        let keys = Object.keys(this.store.ticketsType)
        for(let i of keys){
          if (this.store.ticketsType[i].type !== this.first.item.type){
            otherTypes.push(this.store.ticketsType[i])
          }
        }
        this.sec = {item: otherTypes[0], qty:0}
        this.third = {item: otherTypes[1], qty:0}
        this.expand = true
      },
      buy(e){
        console.log(e)
        let tickets = []
        for (let i of [this.first, this.sec, this.third]){
          if (i && i.qty) tickets.push({type: i.item.type, qty:i.qty})
        }
        const body = {
          fee: this.subTotal*100,
          items: tickets,
          openid: this.store.openid,
          userInfo: e.detail.userInfo,
          phone: this.phone,
          coupon: this.couponToUse ? this.couponToUse.code : null
        }
        http('POST', '/wxpay/order', body, true)
        .then(({orderNo, payParams})=>{
          return new Promise((resolve, reject)=>{
            wepy.requestPayment({
              timeStamp: String(payParams.timeStamp),
              nonceStr: payParams.nonceStr,
              package: payParams.package,
              signType: 'MD5',
              paySign: payParams.paySign,
              success(res){
                console.log(res, payParams)
                resolve({orderNo, payParams})
              },
              fail(err){reject(err)}
            })
          })
        }).then(({orderNo, payParams})=>{
          // cleanup coupon
          let couponStorage = this.store.coupons
          if (this.couponToUse && this.couponToUseIndex > -1){
            this.couponToUse['used'] = true
            console.log(this.couponToUse)
            // splice and push to then end coupon array
            couponStorage.splice(this.couponToUseIndex, 1)
            couponStorage.push(this.couponToUse)
            this.setStore('coupons', couponStorage)
            wepy.setStorageSync('coupons', couponStorage)
          }
          // issue ticket
          return http('POST', '/ticket/issue/wxpay', {
            orderNo: orderNo,
            paySign: payParams.paySign,
            openid: body.openid
          }, true)
        }).then(tickets=>{
          // map tickets and unshift to ticketsPool
          for (let t of tickets){
            t.items['detail'] = this.store.ticketsType[t.items.type]
            t.createdTime = filter.formatDate(t.createdTime)
            this.$parent.globalData.ticketsPool.unshift(t)
          }
          this.$apply()
          this.$parent.$pages['/pages/ticket'].tab = 0
          wepy.navigateBack({delta:2})
        }).catch(err=>{
          console.log(err)
        })
      }
    }
    computed = {
      store: ()=> this.$parent.globalData,
      subTotal(){
        let t = 0
        for(let i of [this.first, this.sec, this.third]){
          if (i && i.hasOwnProperty('qty')){
            t += (i.qty * i.item.price)
          }
        }
        if (this.couponToUse){
          t -= this.couponToUse['discount']
        }
        if (t < 0) t = 0
        return t
      },
      ppl(){
        let p = 0
        for (let i of [this.first, this.sec, this.third]){
          if (i && i.hasOwnProperty('qty')) {
            p += i.item.ppl * i.qty
          }
        }
        return p
      },
      phoneIsValid(){
        return this.phone.length === 11 && this.phone.slice(0, 1) === '1'
      }
    }
    availableCoupon(){
      for (let c in this.store.coupons){
        if (!this.store.coupons[c]['used']){
          this.couponToUseIndex = c
          this.couponToUse = this.store.coupons[c]
          break;
        }
      }
    }
  }
</script>
